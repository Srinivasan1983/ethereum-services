'use strict';

const config = require('../config.js');
const web3Connection = require('../web3.js');
const assert = require('assert');
const ethServer = require('../index.js');
const request = require('supertest');
const nock = require('nock');

describe('Create Service', function() {
  let app;
  let web3;
  let account;

  before(function(done) {
    app = ethServer;
    web3 = web3Connection.web3;
    web3.eth.getAccounts(function(err, accounts) {
      if (err) return done(err);
      account = accounts[0];
      done();
    });
  });

  after(function() {
    ethServer.close();
  });

  // This test requires that a blockchain server be running already
  it('should create an event', function(done) {
    const startDateTime = new Date('October 13, 2018 11:13:00').toISOString();
    const endDateTime = new Date('October 13, 2019 12:13:00').toISOString();
    const reqObj = {
      senderAddress: account,
      price: 10,
      eventName: 'Test Event Generated By Mocha',
      quota: 1000,
      startDateTime,
      endDateTime,
    };

    nock(`${config.SERVER_URL}:${config.DB_SERVER_PORT}`)
    .post('/db/createEvent')
    .reply(200, {
      eventName: reqObj.eventName,
      contractAddress: 123,
      createDateTime: reqObj.startDateTime,
      startDateTime: reqObj.startDateTime,
      endDateTime: reqObj.endDateTime
    });

    request(app)
    .post('/api/events')
    .send(reqObj)
    .expect((res) => {
      assert.deepEqual(res.body.contractAddress, 123);
      assert.deepEqual(res.body.eventName, reqObj.eventName);
      assert.deepEqual(res.body.startDateTime, startDateTime);
      assert.deepEqual(res.body.createDateTime, startDateTime);
      assert.deepEqual(res.body.endDateTime, endDateTime);
    })
    .expect(200, done);
  });
})
