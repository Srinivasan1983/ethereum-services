'use strict';

// const TestRPC = require('ethereumjs-testrpc');
const config = require('../config.js');
const web3Connection = require('../web3.js');
var assert = require('assert');
const ethServer = require('../index.js');
const request = require('supertest');
const sinon = require('sinon');
const rp = require('request-promise');
const nock = require ('nock');

describe('Create Service', function() {
  let app;
  let web3;
  let account;
  let dbServer;

  beforeEach(function() {
		// this.request = sinon.stub(http, 'request');
	});

	afterEach(function() {
		// http.request.restore();
	});

  before(function(done) {
    app = ethServer;
    web3 = web3Connection.web3;
    web3.eth.getAccounts(function(err, accounts) {
      if (err)
        return done(err);
      account = accounts[0];
      done();
    });

  });
  after(function() {
    ethServer.close();
  });

  it('should create an event', function(done) {

    const reqObj = {
      senderAddress: account,
      ticketPrice: 10,
      eventName: 'Test Event Generated By Mocha',
      quota: 1000,
      startDateTime: new Date("October 13, 2018 11:13:00").toISOString(),
      endDateTime: new Date("October 13, 2019 12:13:00").toISOString()
    };

    nock(`${config.SERVER_URL}:${config.DB_SERVER_PORT}`)
    .post('/db/createEvent')
    .reply(200, {
      eventName: reqObj.eventName,
      contractAddress: 123456,
      createDateTime: reqObj.startDateTime,
      startDateTime: reqObj.startDateTime,
      endDateTime: reqObj.endDateTime
    }
  );


    // this.timeout = 5000;
    // const server = TestRPC.server();
    // server.listen(process.env.BLOCKCHAIN_PORT || config.BLOCKCHAIN_PORT, (err, blockchain) => {
    //   let accounts = blockchain.accounts;


    // dbServer.requests[0].respond(
    //   200,
    //   {},
    //   JSON.stringify([
    //     {
    //       eventName: reqObj.eventName,
    //       contractAddress: 123456,
    //       createDateTime: reqObj.startDateTime,
    //       startDateTime: reqObj.startDateTime,
    //       endDateTime: reqObj.endDateTime
    //     }
    //   ])
    // );

    // rp({
    //   method: 'POST',
    //   url: 'http://localhost:3002/api/events',
    //   body: JSON.stringify(reqObj),
    // }).then(function(resp) {
    //   console.log(resp);
    //   done();
    // });
    request(app)
      .post('/api/events')
      .send(reqObj)
      .expect(res => {
        assert.deepEqual(res.body.contractAddress, 12345);
      })
      .expect(200, done);

    // dbServer.respond();
    // .expect(function(res) {
    //   res.body.id = 'some fixed id';
    //   res.body.name = res.body.name.toUpperCase();
    //   // done();
    // }, done)
  });
})
//
// {
//   "ticketPrice":"10",
//   "eventName" : "Andrew New Event",
//   "quota" : "100",
//   "senderAddress": "0xbe91f25338da36fb321f3197ec8f5bef627c873a",
//   "startDateTime": "2016-10-20T10:00",
//   "endDateTime": "2016-10-20T12:00"
// }
